{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\henry\\\\FT-M2-master\\\\08-React-Estado-LifeCycle\\\\homework\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Cards from './components/Cards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [cities, setCities] = useState([]);\n  const apiKey = \"4ae2636d8dfbdc3044bede63951a019b\";\n\n  function onSearch(city) {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`).then(response => response.json()).then(json => {\n      if (json.main !== undefined) {\n        const city = {\n          min: json.main.temp_min,\n          max: json.main.temp_max,\n          id: json.id,\n          img: json.weather[0].icon,\n          temp: json.main.temp,\n          name: json.name\n        };\n        setCities(oldCities => [...oldCities, city]);\n      } else {\n        alert(' ciudad no encontrada');\n      }\n    }).catch(e => console.log(e));\n  }\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      onSearch: onSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Cards, {\n      cities: cities,\n      onClose: onClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"gDRFGyRV/hr45JphCIE9HtRRX1E=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/user/Desktop/henry/FT-M2-master/08-React-Estado-LifeCycle/homework/src/App.js"],"names":["React","useState","Nav","Cards","App","cities","setCities","apiKey","onSearch","city","fetch","then","response","json","main","undefined","min","temp_min","max","temp_max","id","img","weather","icon","temp","name","oldCities","alert","catch","e","console","log","onClose","filter","c"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA4B,OAA5B;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMM,MAAM,GAAC,kCAAb;;AAEA,WAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACrBC,IAAAA,KAAK,CAAE,oDAAmDD,IAAK,UAASF,MAAO,eAA1E,CAAL,CACGI,IADH,CACQC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EADlB,EAEGF,IAFH,CAEQE,IAAI,IAAE;AACV,UAAGA,IAAI,CAACC,IAAL,KAAcC,SAAjB,EAA2B;AACzB,cAAMN,IAAI,GAAC;AACTO,UAAAA,GAAG,EAACH,IAAI,CAACC,IAAL,CAAUG,QADL;AAETC,UAAAA,GAAG,EAACL,IAAI,CAACC,IAAL,CAAUK,QAFL;AAGTC,UAAAA,EAAE,EAACP,IAAI,CAACO,EAHC;AAITC,UAAAA,GAAG,EAACR,IAAI,CAACS,OAAL,CAAa,CAAb,EAAgBC,IAJX;AAKTC,UAAAA,IAAI,EAACX,IAAI,CAACC,IAAL,CAAUU,IALN;AAMTC,UAAAA,IAAI,EAACZ,IAAI,CAACY;AAND,SAAX;AAWAnB,QAAAA,SAAS,CAACoB,SAAS,IAAE,CAAC,GAAGA,SAAJ,EAAcjB,IAAd,CAAZ,CAAT;AACD,OAbD,MAaK;AACHkB,QAAAA,KAAK,CAAC,uBAAD,CAAL;AACD;AACF,KAnBH,EAoBGC,KApBH,CAoBSC,CAAC,IAAEC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CApBZ;AAsBD;;AACD,WAASG,OAAT,CAAiBZ,EAAjB,EAAoB;AAClBd,IAAAA,SAAS,CAACoB,SAAS,IAAEA,SAAS,CAACO,MAAV,CAAiBC,CAAC,IAAEA,CAAC,CAACd,EAAF,KAAOA,EAA3B,CAAZ,CAAT;AACD;;AAKD,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEE,QAAC,GAAD;AAAK,MAAA,QAAQ,EAAEZ;AAAf;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,KAAD;AAAO,MAAA,MAAM,EAAEH,MAAf;AAAuB,MAAA,OAAO,EAAE2B;AAAhC;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA1CuB5B,G;;KAAAA,G","sourcesContent":["import React,{useState}from 'react';\nimport './App.css';\nimport Nav from './components/Nav'\nimport Cards from './components/Cards'\n\nexport default function App() {\n  const [cities,setCities]= useState([]);\n  const apiKey=\"4ae2636d8dfbdc3044bede63951a019b\"\n\n  function onSearch(city){\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`)\n      .then(response=>response.json())\n      .then(json=>{\n        if(json.main !== undefined){\n          const city={\n            min:json.main.temp_min,\n            max:json.main.temp_max,\n            id:json.id,\n            img:json.weather[0].icon,\n            temp:json.main.temp,\n            name:json.name\n            \n\n\n          };\n          setCities(oldCities=>[...oldCities,city    ]);\n        }else{\n          alert(' ciudad no encontrada')\n        }\n      })\n      .catch(e=>console.log(e))\n\n  }\n  function onClose(id){\n    setCities(oldCities=>oldCities.filter(c=>c.id!==id))\n  }\n\n\n\n\n  return (\n    <div className=\"App\">\n      { /* Tu código acá: */ }\n      <Nav onSearch={onSearch}/>\n      <Cards cities={cities} onClose={onClose}/>\n            </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}